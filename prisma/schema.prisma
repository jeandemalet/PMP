// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  preferences Json?   // Préférences utilisateur (thème, langue, notifications, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  jobs        Job[]
  galleries   Gallery[]
  images      Image[]
  publications Publication[]
  sessions    Session[]
  accounts    Account[]

  @@map("users")
}

model Job {
  id          String   @id @default(cuid())
  type        JobType
  status      JobStatus @default(PENDING)
  data        Json?
  result      Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Gallery {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Pour la palette de couleurs dynamique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]

  @@map("galleries")
}

model Image {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  path        String
  size        Int
  mimeType    String
  width       Int?
  height      Int?
  title       String?
  description String?
  tags        String?
  alt         String?  // Texte alternatif pour l'accessibilité
  caption     String?  // Légende
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  galleryId   String?
  gallery     Gallery?  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  publications PublicationImage[]
  variants    ImageVariant[]

  @@map("images")
}

model ImageVariant {
  id          String   @id @default(cuid())
  filename    String
  path        String
  width       Int
  height      Int
  size        Int
  mimeType    String
  variantType String   // 'crop', 'resize', 'rotate', etc.
  parameters  Json?    // Paramètres utilisés pour créer cette variante
  createdAt   DateTime @default(now())

  // Relations
  imageId     String
  image       Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  // Note: L'utilisateur est accessible via image.user, pas besoin de relation directe

  @@map("image_variants")
}

model Publication {
  id          String   @id @default(cuid())
  name        String
  description String?
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      PublicationImage[]

  @@map("publications")
}

model PublicationImage {
  id            String @id @default(cuid())
  position      Int    // Pour l'ordre dans la publication
  createdAt     DateTime @default(now())

  // Relations
  publicationId String
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  imageId       String
  image         Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([publicationId, imageId])
  @@map("publication_images")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("password_reset_tokens")
}

enum Role {
  USER
  ADMIN
}

enum JobType {
  IMAGE_CROP
  IMAGE_RESIZE
  ZIP_CREATE
  VIDEO_PROCESS
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
