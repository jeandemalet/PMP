# =============================================================================
# --- CONFIGURATION (Partie à modifier) ---
# =============================================================================

# 1. Chemin complet vers le dossier de votre projet
$projetDirectory = "$env:USERPROFILE\Desktop\PMP"

# 2. Nom du sous-dossier qui contiendra les exports (sera créé dans $projetDirectory)
$outputSubfolderName = "copypaste export"


# =============================================================================
# --- PARAMÈTRES TECHNIQUES (Adapter si besoin) ---
# =============================================================================

# Extensions de fichier à INCLURE (contenu complet)
$extensionsToInclude = @(
    "*.js", "*.ts", "*.jsx", "*.tsx", "*.mjs", "*.cjs", # JavaScript/TypeScript
    "*.html", "*.css", "*.scss", "*.svg",              # Web Frontend
    "*.json", "*.md",                                 # Configuration & Docs
    "*.prisma",                                       # Prisma Schema
    "Dockerfile", "*.yml", "*.yaml"                   # Docker & CI/CD
)

# Dossiers/fichiers à EXCLURE COMPLÈTEMENT de l'export
$pathsToExcludeCompletely = @(
    # --- Données utilisateur et fichiers générés par l'application ---
    "uploads",
    "archives",

    # --- Répertoires de dépendances et de build (très volumineux) ---
    "node_modules",
    ".next",
    "dist",
    "build",

    # --- Contrôle de version et configuration de l'IDE ---
    ".git",
    ".vscode",
    ".idea",

    # --- Fichiers générés par les outils et caches ---
    "__pycache__",
    "prisma\migrations",
    "playwright-report",
    "test-results",
    ".eslintcache",
    "coverage",

    # --- Fichiers système et temporaires ---
    ".DS_Store",
    "*.log",
    "*.tmp",
    "*.db",

    # --- Fichiers sensibles ou de lock (inutiles pour l'analyse du code) ---
    ".env*",
    "pnpm-lock.yaml",
    "yarn.lock",
    "package-lock.json",

    # --- IMPORTANT : Exclure le dossier d'export lui-même pour éviter les boucles ---
    $outputSubfolderName
)


# =============================================================================
# --- SCRIPT D'EXPORTATION (Ne pas modifier) ---
# =============================================================================

# --- Validation initiale ---
if (-not (Test-Path $projetDirectory -PathType Container)) {
    Write-Error "ERREUR : Le dossier du projet '$projetDirectory' n'existe pas."
    return
}

# --- Préparation des chemins ---
$outputDirectory = Join-Path -Path $projetDirectory -ChildPath $outputSubfolderName
New-Item -Path $outputDirectory -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null

$timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
$outputFile = Join-Path -Path $outputDirectory -ChildPath "export_PMP_code_$($timestamp).txt"

# --- Exécution ---
$streamWriter = $null
try {
    $streamWriter = New-Object System.IO.StreamWriter($outputFile, $false, [System.Text.Encoding]::UTF8)
    $startTime = Get-Date

    Write-Host "Début de l'exportation du projet '$projetDirectory'..." -ForegroundColor Green
    $streamWriter.WriteLine("--- Export du projet '$($projetDirectory)' | Généré le $(Get-Date) ---")

    # Récupération des fichiers en excluant directement les dossiers non pertinents pour la performance
    $allFiles = Get-ChildItem -Path $projetDirectory -Recurse -File -Include $extensionsToInclude -Exclude $pathsToExcludeCompletely -ErrorAction SilentlyContinue
    $includedCount = $allFiles.Count
    Write-Host "Analyse et inclusion de $($includedCount) fichier(s) pertinent(s)..."

    # Traitement des fichiers
    foreach ($file in $allFiles) {
        $relativePath = $file.FullName.Substring($projetDirectory.Length + 1)
        
        $streamWriter.WriteLine()
        $streamWriter.WriteLine("====================================================================")
        $streamWriter.WriteLine("--- Fichier: $relativePath")
        $streamWriter.WriteLine("====================================================================")
        $streamWriter.WriteLine()
        try {
            $content = Get-Content -Path $file.FullName -Raw -Encoding UTF8 -ErrorAction Stop
            $streamWriter.WriteLine($content)
        } catch {
            $streamWriter.WriteLine("/!\\ ERREUR DE LECTURE : $($_.Exception.Message) /!\\")
        }
    }

    $streamWriter.WriteLine()
    $streamWriter.WriteLine("--- Fin de l'exportation ---")

    # --- Résumé final dans la console ---
    $duration = (Get-Date) - $startTime
    Write-Host "----------------------------------------"
    Write-Host "Exportation terminée en $($duration.TotalSeconds.ToString("F2")) secondes." -ForegroundColor Green
    Write-Host " - $($includedCount) fichier(s) ont été inclus avec leur contenu."
    Write-Host "Fichier de sortie : $outputFile"

} catch {
    Write-Error "ERREUR GLOBALE : $($_.Exception.Message)"
} finally {
    if ($null -ne $streamWriter) {
        $streamWriter.Close()
        $streamWriter.Dispose()
    }
}