import { NextRequest, NextResponse } from 'next/server';
import { tokenManager } from '@/lib/token-manager';

export async function POST(request: NextRequest) {
  try {
    // R√©cup√©rer le token depuis les cookies pour l'ajouter √† la blocklist
    const token = request.cookies.get('auth-token')?.value;

    if (token) {
      // Ajouter le token √† la blocklist pour l'invalider imm√©diatement
      await tokenManager.blacklistToken(token);
      console.log('üîí Token ajout√© √† la blocklist lors de la d√©connexion');
    }

    // Cr√©er la r√©ponse de d√©connexion
    const response = NextResponse.json(
      { message: 'D√©connexion r√©ussie' },
      { status: 200 }
    );

    // Supprimer le cookie d'authentification
    response.cookies.set('auth-token', '', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 0, // Expire imm√©diatement
      path: '/',
    });

    return response;
  } catch (error) {
    console.error('Erreur lors de la d√©connexion:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}
