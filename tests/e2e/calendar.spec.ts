import { test, expect } from '@playwright/test';

test.describe('Calendrier et Export - Tests End-to-End', () => {
  test.beforeEach(async ({ page }) => {
    // Se connecter avant chaque test
    await page.goto('/login');

    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'password123');
    await page.click('button[type="submit"]');

    // Attendre la redirection vers la galerie
    await expect(page).toHaveURL('/gallery');
  });

  test('devrait acc√©der √† la page calendrier depuis la galerie', async ({ page }) => {
    // Naviguer vers la page calendrier
    await page.goto('/calendar');

    // V√©rifier que la page calendrier se charge
    await expect(page.locator('h1')).toContainText('PMP - Calendrier de Publication');
  });

  test('devrait afficher la sidebar des publications', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence de la sidebar des publications
    await expect(page.locator('h2')).toContainText('Publications');
    await expect(page.locator('text=Glissez les publications sur le calendrier')).toBeVisible();
  });

  test('devrait afficher le calendrier mensuel', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence du calendrier
    await expect(page.locator('h2')).toContainText(/janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre/i);
    await expect(page.locator('text=Dim')).toBeVisible();
    await expect(page.locator('text=Lun')).toBeVisible();
    await expect(page.locator('text=Mar')).toBeVisible();
    await expect(page.locator('text=Mer')).toBeVisible();
    await expect(page.locator('text=Jeu')).toBeVisible();
    await expect(page.locator('text=Ven')).toBeVisible();
    await expect(page.locator('text=Sam')).toBeVisible();
  });

  test('devrait permettre la navigation dans le calendrier', async ({ page }) => {
    await page.goto('/calendar');

    // Cliquer sur mois pr√©c√©dent
    await page.click('button:has-text("Mois pr√©c√©dent")');

    // Cliquer sur mois suivant
    await page.click('button:has-text("Mois suivant")');

    // Cliquer sur aujourd'hui
    await page.click('button:has-text("Aujourd\'hui")');

    // V√©rifier que la navigation fonctionne
    await expect(page.locator('h2')).toBeVisible();
  });

  test('devrait afficher les publications avec leurs couleurs', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence des publications avec couleurs
    await expect(page.locator('.bg-blue-500, .bg-green-500, .bg-purple-500')).toBeVisible();
  });

  test('devrait permettre le drag and drop des publications sur le calendrier', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier que les publications sont dragables
    await expect(page.locator('[draggable="true"]')).toBeVisible();

    // V√©rifier que les jours du calendrier acceptent le drop
    await expect(page.locator('[draggable="true"]')).toBeVisible();
  });

  test('devrait afficher les statistiques des publications', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence des statistiques
    await expect(page.locator('text=Publications planifi√©es')).toBeVisible();
    await expect(page.locator('text=Publications non planifi√©es')).toBeVisible();
  });

  test('devrait afficher la l√©gende des couleurs', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence de la l√©gende
    await expect(page.locator('text=L√©gende')).toBeVisible();
    await expect(page.locator('.bg-blue-500')).toBeVisible();
  });

  test('devrait permettre le changement de vue mois/semaine', async ({ page }) => {
    await page.goto('/calendar');

    // Cliquer sur le bouton de changement de vue
    await page.click('button:has-text("Vue mois")');

    // V√©rifier que le bouton change
    await expect(page.locator('button:has-text("Vue semaine")')).toBeVisible();
  });

  test('devrait afficher un message pour les publications vides', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier le message pour publications vides
    await expect(page.locator('text=Aucune publication')).toBeVisible();
    await expect(page.locator('text=Cr√©ez des publications depuis la page Tri')).toBeVisible();
  });

  test('devrait permettre l\'export de toutes les publications', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier la pr√©sence du bouton d'export
    await expect(page.locator('button:has-text("üì• Exporter tout")')).toBeVisible();

    // Le bouton devrait √™tre d√©sactiv√© s'il n'y a pas de publications planifi√©es
    await expect(page.locator('button:has-text("üì• Exporter tout")')).toBeDisabled();
  });

  test('devrait afficher les publications planifi√©es sur les bonnes dates', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier que les publications planifi√©es apparaissent sur les bonnes dates
    // (Ce test n√©cessiterait des donn√©es de test pr√©-remplies)
    await expect(page.locator('text=Aucun contenu')).toBeVisible();
  });

  test('devrait permettre la d√©planification d\'une publication', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier que les publications planifi√©es peuvent √™tre modifi√©es
    // (Ce test n√©cessiterait des donn√©es de test pr√©-remplies)
    await expect(page.locator('text=Publications')).toBeVisible();
  });

  test('devrait g√©rer les erreurs d\'export', async ({ page }) => {
    await page.goto('/calendar');

    // Tenter un export sans publications
    // Le bouton devrait √™tre d√©sactiv√©
    await expect(page.locator('button:has-text("üì• Exporter tout")')).toBeDisabled();
  });

  test('devrait afficher les informations d√©taill√©es des publications', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier l'affichage des informations des publications
    await expect(page.locator('text=images')).toBeVisible();
  });

  test('devrait permettre la cr√©ation de nouvelles publications depuis le calendrier', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier qu'on peut cr√©er des publications
    // (La cr√©ation se fait depuis la page tri, mais on peut v√©rifier la navigation)
    await expect(page.locator('text=Publications')).toBeVisible();
  });

  test('devrait g√©rer la responsivit√© du calendrier', async ({ page }) => {
    await page.goto('/calendar');

    // Tester la responsivit√© sur mobile
    await page.setViewportSize({ width: 375, height: 667 });

    // V√©rifier que le calendrier reste fonctionnel
    await expect(page.locator('h1')).toContainText('PMP - Calendrier de Publication');
  });

  test('devrait afficher les tooltips des publications', async ({ page }) => {
    await page.goto('/calendar');

    // Survoler une publication pour v√©rifier les tooltips
    // (Ce test n√©cessiterait des donn√©es de test pr√©-remplies)
    await expect(page.locator('text=Publications')).toBeVisible();
  });

  test('devrait permettre la recherche et le filtrage des publications', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier qu'il n'y a pas de fonction de recherche pour l'instant
    // (Cette fonctionnalit√© pourrait √™tre ajout√©e plus tard)
    await expect(page.locator('text=Publications')).toBeVisible();
  });

  test('devrait g√©rer les publications avec beaucoup d\'images', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier que les publications avec beaucoup d'images sont g√©r√©es correctement
    await expect(page.locator('text=images')).toBeVisible();
  });

  test('devrait afficher les m√©tadonn√©es des publications dans le calendrier', async ({ page }) => {
    await page.goto('/calendar');

    // V√©rifier l'affichage des m√©tadonn√©es
    await expect(page.locator('text=Planifi√©')).toBeVisible();
  });
});
